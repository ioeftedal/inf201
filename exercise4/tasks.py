"""
JÃ¸rgen Asmundvaag
jorgen.asmundvaag@nmbu.no

Ivar Eftedal
ivar.odegardstuen.eftedal@nmbu.no
"""

import time
from pathlib import Path

import numpy as np

"""
Task 0:
"""


def create_setup(project_name: str) -> None:
    # Get the curent path
    current_dir = Path.cwd()
    print(f"Current working directory is {current_dir}.")

    # Create the project directory
    project_dir = current_dir / project_name
    if not project_dir.exists():
        project_dir.mkdir()
    else:
        print("Directory already exists. Aborting")
        return

    # Create the data directory
    data_dir = project_dir / "data"
    if not data_dir.exists():
        data_dir.mkdir()

        # Create data
        data_name = data_dir / "data.txt"
        data_name.touch()
    else:
        print("Directory already exists. Aborting")
        return

    # Create the output folder
    output_dir = project_dir / "ouput"
    if not output_dir.exists():
        output_dir.mkdir()
    else:
        print("Directory already exists. Aborting")


project_name = "test"
create_setup(project_name)


dir_data = Path(project_name) / "data"
if dir_data.exists():
    print(
        f"Data directory created successfully. Absolute path is: {dir_data.resolve()}"
    )


dir_data = Path(project_name) / "ouput"
if dir_data.exists():
    print(
        f"Output directory created successfully. Absolute path is: {dir_data.resolve()}"
    )


"""
Task 1:
"""


# Function to create the exercises and assignments based off the number off exercises
# and when the assignments should start using list comprehension
def create_exercises(total_numbers: int, project_assignments_start: int) -> list:
    exercises = [
        assignment
        for exercise in range(1, total_numbers + 1)
        for assignment in (
            [f"exercise_{exercise}"]
            if exercise < project_assignments_start
            else [f"exercise_{exercise}a", f"exercise_{exercise}b"]
        )
    ]
    return exercises


# Function to create all the drectories based off the names generated by the create_exercises function
# It also genereates directories for all students inside the exercise directories
def create_setup_2(exercises: list, students: list) -> None:
    # Create the project directories:
    for project_name in exercises:
        project_dir = Path.cwd() / project_name
        if not project_dir.exists():
            project_dir.mkdir()
            for student in students:
                # Create student dir inside the project dir
                student_dir = project_dir / student
                if not student_dir.exists():
                    student_dir.mkdir()
                else:
                    print(
                        f"Directory for {student} already exists inside {project_name}"
                    )
        else:
            print(f"Project directory {project_name} already exists")


# Function to print out the file structure of current directory
def print_directory_structure() -> None:
    for path in Path.cwd().glob("*/*"):
        if path.is_dir():
            print(path.relative_to(Path.cwd()))


students = ["Ole", "Sarah"]
exercises = create_exercises(4, 3)
create_setup_2(exercises, students)
print_directory_structure()

"""
Task 2:
"""
SIZE = 10_000


def matrix_vector_product(matrix: list[list], vector: list) -> list:
    y_i = [0] * len(matrix)
    for i in range(len(matrix)):
        for j in range(len(vector)):
            y_i[i] += matrix[i][j] * vector[j]

    return y_i


def numpy_matrix_vector_product(matrix: np.array, vector: np.array) -> np.array:
    return matrix.dot(vector)


matrix2, vector2 = np.random.randint(SIZE, size=(SIZE, SIZE)), np.random.randint(
    SIZE, size=SIZE
)

matrix1, vector1 = matrix2.tolist(), vector2.tolist()


start_time1 = time.time()
matrix_vector_product(matrix1, vector1)
stop_time1 = time.time()
print(f"python list: {stop_time1 - start_time1}")

start_time2 = time.time()
numpy_matrix_vector_product(matrix2, vector2)
stop_time2 = time.time()
print(f"Numpy array: {stop_time2 - start_time2}")
